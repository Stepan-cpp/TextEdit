<Application x:Class="TextEdit.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml"
             Startup="Application_Startup">
    <Application.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
       TargetType="{x:Type Separator}">
            <Setter Property="Height"
          Value="1" />
            <Setter Property="Margin"
          Value="4" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border BorderThickness="1" BorderBrush="{DynamicResource Foreground}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                 TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" BorderThickness="1" BorderBrush="Transparent">
                <Grid>
                    <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                    <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                        <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Background="{DynamicResource LowlightBackground}" BorderBrush="{DynamicResource Lowlight}">
                            <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOver}"/>
                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BorderHighlight}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                 TargetType="{x:Type MenuItem}">
            <Border x:Name="Border"
          BorderThickness="1">
                <Grid Margin="4 0 4 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="13" />
                        <ColumnDefinition Width="Auto"
                          SharedSizeGroup="Shortcut" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="HeaderText" Grid.Column="0" Text="{TemplateBinding Header}" Margin="5,2,0,2" DockPanel.Dock="Left" VerticalAlignment="Center" TextAlignment="Left"/>
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Opacity="0.6" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" VerticalAlignment="Center" TextAlignment="Right"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOver}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="HeaderText" Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
                    <Setter TargetName="InputGestureText" Property="Foreground" Value="{DynamicResource ForegroundDisabled}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                 TargetType="{x:Type MenuItem}">
            <Border Background="Red" x:Name="Border" BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="13" />
                        <ColumnDefinition Width="Auto"
                          SharedSizeGroup="Shortcut" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="HeaderText" Grid.Column="0" Opacity="0.8" Text="{TemplateBinding Header}" Margin="5,2,0,2" DockPanel.Dock="Left" VerticalAlignment="Center" TextAlignment="Left"/>
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Opacity="0.8" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" VerticalAlignment="Center" TextAlignment="Right"/>
                    <Popup x:Name="Popup" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                        <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource MenuPopupBrush}" BorderThickness="1">
                            <ScrollViewer CanContentScroll="True">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="Control" x:Key="common">
            <Setter Property="ItemsControl.FontSize" Value="14"/>
        </Style>
        <Style x:Key="LowSeparator" TargetType="Separator">
            <Setter Property="Background" Value="{DynamicResource LowlightBackground}"/>
            <Setter Property="Height" Value="3"/>
        </Style>
        <Style x:Key="WindowStyle" TargetType="Window">
            <Setter Property="Background" Value="{DynamicResource Background}" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        </Style>
        <Style x:Key="ButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="{DynamicResource LowlightBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    Height="{TemplateBinding Height}"
                    Width="{TemplateBinding Width}" >
                            <ContentControl Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource MouseOver}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Background" Value="{DynamicResource LowlightBackground}" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="IsThreeState" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="{DynamicResource MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ToggleChecked}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MenuStyle" TargetType="Menu">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        </Style>
        <Style x:Key="RichTextBoxStyle" TargetType="RichTextBox">
            <Setter Property="Background" Value="{DynamicResource TextFieldColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        </Style>
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="{DynamicResource TextFieldColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        </Style>
        <Style x:Key="TextBlockStyle" TargetType="TextBlock">
            <Setter Property="Background" Value="{DynamicResource TextFieldColor}"/>
            <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        </Style>
    </Application.Resources>
</Application>
